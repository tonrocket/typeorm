"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("reflect-metadata");
const test_utils_1 = require("../../../utils/test-utils");
const Post_1 = require("./entity/Post");
describe("column kinds > create date column", () => {
    let connections;
    before(async () => (connections = await (0, test_utils_1.createTestingConnections)({
        entities: [__dirname + "/entity/*{.js,.ts}"],
    })));
    beforeEach(() => (0, test_utils_1.reloadTestingDatabases)(connections));
    after(() => (0, test_utils_1.closeTestingConnections)(connections));
    it("create date column should automatically be set by a database", () => Promise.all(connections.map(async (connection) => {
        const postRepository = connection.getRepository(Post_1.Post);
        // save a new post
        const post = new Post_1.Post();
        post.title = "Post";
        await postRepository.save(post);
        // load and check if createdAt is a date (generated by db)
        const loadedPost = await postRepository.findOneBy({
            id: post.id,
        });
        (0, chai_1.expect)(loadedPost).to.be.not.empty;
        (0, chai_1.expect)(loadedPost.title).to.be.eql("Post");
        (0, chai_1.expect)(loadedPost.createdAt).to.be.instanceOf(Date);
    })));
    it("create date column can also be manually set by user", () => Promise.all(connections.map(async (connection) => {
        const postRepository = connection.getRepository(Post_1.Post);
        const createdAt = new Date(Date.parse("2020-01-01T00:00:00+0000"));
        // save a new post
        const post = new Post_1.Post();
        post.title = "Post";
        post.createdAt = createdAt;
        await postRepository.save(post);
        // load and check if createdAt was a value set by us
        const loadedPost = await postRepository.findOneBy({
            id: post.id,
        });
        (0, chai_1.expect)(loadedPost).to.be.not.empty;
        (0, chai_1.expect)(loadedPost.title).to.be.eql("Post");
        (0, chai_1.expect)(loadedPost.createdAt).to.be.eql(createdAt);
    })));
    it("create date column should not be updated automatically on every change", () => Promise.all(connections.map(async (connection) => {
        const postRepository = connection.getRepository(Post_1.Post);
        // save a new post
        const post = new Post_1.Post();
        post.title = "Post";
        await postRepository.save(post);
        // load to get created date we had after first save
        const loadedPostBeforeUpdate = await postRepository.findOneBy({
            id: post.id,
        });
        // wait a second
        await (0, test_utils_1.sleep)(1000);
        // create post once again
        post.title = "Updated Title";
        await postRepository.save(post);
        // check if date was created
        const loadedPostAfterUpdate = await postRepository.findOneBy({
            id: post.id,
        });
        (0, chai_1.expect)(loadedPostAfterUpdate.createdAt.toString()).to.be.eql(loadedPostBeforeUpdate.createdAt.toString());
    })));
    it("create date column should set a custom date when specified", () => Promise.all(connections.map(async (connection) => {
        const postRepository = connection.getRepository(Post_1.Post);
        // save a new post
        const post = new Post_1.Post();
        post.title = "Post";
        await postRepository.save(post);
        // create post once again
        const createdAt = new Date(Date.parse("2020-01-01T00:00:00+0000"));
        post.title = "Updated Title";
        post.createdAt = createdAt;
        await postRepository.save(post);
        // check if date was created
        const loadedPost = await postRepository.findOneBy({
            id: post.id,
        });
        (0, chai_1.expect)(loadedPost.createdAt).to.be.eql(createdAt);
    })));
});
//# sourceMappingURL=create-date-column.js.map