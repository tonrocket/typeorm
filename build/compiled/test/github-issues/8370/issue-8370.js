"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const test_utils_1 = require("../../utils/test-utils");
const UserEntity_1 = require("./entity/UserEntity");
const chai_1 = require("chai");
describe("github issues > #8370 Add support for Postgres GENERATED ALWAYS AS IDENTITY", () => {
    let connections;
    before(async () => (connections = await (0, test_utils_1.createTestingConnections)({
        entities: [UserEntity_1.User],
        schemaCreate: false,
        dropSchema: true,
        enabledDrivers: ["postgres"],
    })));
    after(() => (0, test_utils_1.closeTestingConnections)(connections));
    it("should produce proper SQL for creating a column with `BY DEFAULT` identity column", () => Promise.all(connections.map(async (connection) => {
        const sqlInMemory = await connection.driver
            .createSchemaBuilder()
            .log();
        (0, chai_1.expect)(sqlInMemory)
            .to.have.property("upQueries")
            .that.is.an("array")
            .and.has.length(1);
        // primary key
        (0, chai_1.expect)(sqlInMemory.upQueries[0])
            .to.have.property("query")
            .that.contains(`"id" integer GENERATED ALWAYS AS IDENTITY NOT NULL`);
        // second id
        (0, chai_1.expect)(sqlInMemory.upQueries[0])
            .to.have.property("query")
            .that.contains(`"secondId" bigint GENERATED ALWAYS AS IDENTITY NOT NULL`);
        // third id
        (0, chai_1.expect)(sqlInMemory.upQueries[0])
            .to.have.property("query")
            .that.contains(`"thirdId" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL`);
        // fourth id
        (0, chai_1.expect)(sqlInMemory.upQueries[0])
            .to.have.property("query")
            .that.contains(`"fourthId" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL`);
    })));
});
//# sourceMappingURL=issue-8370.js.map